from web3 import Web3
import json

#json.loads()

NODE_PROVIDER='YOUR_GANACHE_RPC_ID'
ADDRESS_1='YOUR_PUBLIC_KEY_1'
ADDRESS_2='YOUR_PUBLIC_KEY_2'
PRIVATE_KEY_1='YOUR_PRIVATE_KEY_1'
PRIVATE_KEY_2='YOUR_PRIVATE_KEY_2'

## For the contract ABI & Bytecode, code in Remix Ethereum first and then get the information from the Compiler there and copy paste below.

CONTRACT_ABI='[{"inputs":[{"internalType":"uint256","name":"_secretNumber","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"currState","outputs":[{"internalType":"enum guess_number.State","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"player","type":"address"},{"internalType":"uint256","name":"_numberGuess","type":"uint256"}],"name":"play","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"}]'
CONTRACT_BYTECODE='0x608060405260405161077b38038061077b83398181016040528101906100259190610099565b678ac7230489e80000341015610070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610067906100e5565b60405180910390fd5b806000819055503460028190555050610186565b6000815190506100938161016f565b92915050565b6000602082840312156100ab57600080fd5b60006100b984828501610084565b91505092915050565b60006100cf602c83610105565b91506100da82610120565b604082019050919050565b600060208201905081810360008301526100fe816100c2565b9050919050565b600082825260208201905092915050565b6000819050919050565b7f7468697320636f6e7472616374206e6565647320746f2062652066756e64656460008201527f2077697468203130204554480000000000000000000000000000000000000000602082015250565b61017881610116565b811461018357600080fd5b50565b6105e6806101956000396000f3fe6080604052600436106100345760003560e01c806312065fe014610039578063afe0104314610064578063f0e10c0d1461008f575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b91906103db565b60405180910390f35b34801561007057600080fd5b506100796100c9565b6040516100869190610380565b60405180910390f35b6100a960048036038101906100a491906102e0565b6100dc565b6040516100b691906103db565b60405180910390f35b6000600254905090565b600160009054906101000a900460ff1681565b6000670de0b6b3a7640000341015610129576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610120906103bb565b60405180910390fd5b60006001811115610163577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600160009054906101000a900460ff1660018111156101ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e29061039b565b60405180910390fd5b346002546101f99190610407565b6002819055506000548214156102aa578273ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561024f573d6000803e3d6000fd5b5060018060006101000a81548160ff0219169083600181111561029b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060025490506102b0565b60025490505b92915050565b6000813590506102c581610582565b92915050565b6000813590506102da81610599565b92915050565b600080604083850312156102f357600080fd5b6000610301858286016102b6565b9250506020610312858286016102cb565b9150509250929050565b610325816104ac565b82525050565b60006103386008836103f6565b91506103438261051c565b602082019050919050565b600061035b601c836103f6565b915061036682610545565b602082019050919050565b61037a816104a2565b82525050565b6000602082019050610395600083018461031c565b92915050565b600060208201905081810360008301526103b48161032b565b9050919050565b600060208201905081810360008301526103d48161034e565b9050919050565b60006020820190506103f06000830184610371565b92915050565b600082825260208201905092915050565b6000610412826104a2565b915061041d836104a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610452576104516104be565b5b828201905092915050565b600061046882610482565b9050919050565b600081905061047d8261056e565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006104b78261046f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f546f6f206c617465000000000000000000000000000000000000000000000000600082015250565b7f706179206174206c65617374206f6e652045544820746f206761696e00000000600082015250565b6002811061057f5761057e6104ed565b5b50565b61058b8161045d565b811461059657600080fd5b50565b6105a2816104a2565b81146105ad57600080fd5b5056fea26469706673582212205735bbab87e4a91b5d2ed7b7dbcbc40046b9ca71316ef401c1ca79e62322cfc564736f6c63430008010033'

node_provider=NODE_PROVIDER
web3_connection = Web3(Web3.HTTPProvider(NODE_PROVIDER))

def are_we_connected():
    return web3_connection.isConnected()

contract_abi = json.loads(CONTRACT_ABI)
contract_bytecode = CONTRACT_BYTECODE

def get_nonce(ETH_address):
    return web3_connection.eth.get_transaction_count(ETH_address)

def deploy_contract(secret_number, amount_ETH, owner, signature):
    guess_number = web3_connection.eth.contract(abi=contract_abi, bytecode=contract_bytecode)

    transaction_body= {
        'nonce': get_nonce(owner),
        'value': web3_connection.toWei(amount_ETH, 'ether'),
    }

    deployment = guess_number.constructor(secret_number).buildTransaction(transaction_body)
    signed_transaction = web3_connection.eth.account.sign_transaction(deployment, signature)
    result = web3_connection.eth.send_raw_transaction(signed_transaction.rawTransaction)
    return result

print(deploy_contract(7, 11, ADDRESS_1, PRIVATE_KEY_1))
